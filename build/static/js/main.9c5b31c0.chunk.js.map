{"version":3,"sources":["Components/Player/PlayerList.js","Components/Player/PlayerSingle.js","Components/Player/PlayerForm.js","Components/App.js","serviceWorker.js","index.js"],"names":["PlayerList","props","React","createElement","className","players","map","item","href","key","_id","onClick","updateCurrentPlayer","bind","firstName","lastName","PlayerSingle","src","alt","player","phone","email","strength","endurance","team","PlayerForm","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","value","event","preventDefault","axios","post","this","refs","then","response","console","log","catch","error","onSubmit","submitPlayer","id","ref","type","htmlFor","nme","Component","App","_this","call","state","currentPlayer","_assertThisInitialized","_this2","get","Response","setState","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c5b31c0.chunk.js","sourcesContent":["import React from 'react';\n\nconst PlayerList = (props) => {\n    return ( \n    <div>\n        <ul className=\"collection with-header\">\n            <li className=\"collection-header\"><h4>Players</h4></li>\n            {props.players.map((item) => (\n                <a href=\"#!\" className=\"collection-item\" key={item._id}\n                onClick={props.updateCurrentPlayer.bind(this,item)}>{item.firstName} {item.lastName}</a>\n            ))}\n        </ul>\n    </div> \n    );\n}\n \nexport default PlayerList;\n","import React from 'react';\n\nconst PlayerSingle = (props) => {\n    return (\n        <div className=\"row\">\n            <div className=\"col s12\">\n            <div className=\"card\">\n                <div className=\"card-image\">\n                <img src=\"soccer.jpeg\" alt=\"Soccer player\"/>\n    <span className=\"card-title\">{props.player.firstName} {props.player.lastName}</span>\n                </div>\n                <div className=\"card-content\">\n                <p>Phone: {props.player.phone} - Email: {props.player.email}</p>\n                <p>Strength: {props.player.strength} - Endurance: {props.player.endurance}</p>\n                </div>\n                <div className=\"card-action\">\n                    Team: {props.player.team}\n                </div>\n            </div>\n            </div>\n        </div>\n    );\n}\n \nexport default PlayerSingle;","import React from 'react';\nimport axios from 'axios';\n\nclass PlayerForm extends React.Component {\n    submitPlayer(event) {\n        event.preventDefault();\n\n        axios.post('http://localhost:4000/players', {\n            firstName: this.refs.firstName.value,\n            lastName: this.refs.lastName.value,\n            phone: this.refs.phone.value,\n            email: this.refs.email.value,\n        })\n        .then((response) => {\n            console.log(response);\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    }\n\n    render() { \n        return ( \n            <div className=\"row\">\n                <h1 className=\"center\">Add a new player</h1>\n                <form className=\"col s12\" onSubmit={this.submitPlayer.bind(this)}>\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input id=\"firstName\" ref=\"firstName\" type=\"text\" />\n                            <label htmlFor=\"firstName\">First Name</label>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input id=\"lastName\" ref=\"lastName\" type=\"text\" />\n                            <label htmlFor=\"lastName\">Last Name</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input id=\"phone\" ref=\"phone\" type=\"text\" />\n                            <label htmlFor=\"phone\">Phone</label>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input id=\"email\" ref=\"email\" type=\"text\" />\n                            <label htmlFor=\"email\">Email</label>\n                        </div>\n                    </div>\n                    <button className=\"btn waves-effect waves-light\" type=\"submit\"\n                    nme=\"action\">Add player</button>\n                </form>\n            </div>\n        );\n    }\n}\n \nexport default PlayerForm;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport PlayerList from './Player/PlayerList';\nimport PlayerSingle from './Player/PlayerSingle';\nimport PlayerForm from './Player/PlayerForm';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n      currentPlayer: {},\n    }\n\n    this.updateCurrentPlayer = this.updateCurrentPlayer.bind(this);\n  }\n\n  componentDidMount() {\n    const url = process.env.REACT_APP_NODE_ENV === 'development' ? 'http://localhost:4000/players' : 'https://mern-sample-backend.onrender.com';\n\n    axios.get(url)\n      .then((Response) => {\n        this.setState({\n          players: Response.data\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  updateCurrentPlayer(item) {\n    this.setState({\n      currentPlayer: item,\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n        <nav>\n          <div className=\"nav-wrapper blue darken-1\">\n            <a href=\"/\" className=\"brand-logo\">Soccer Management</a>\n          </div>\n        </nav>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s3\"><PlayerList players={this.state.players}\n            updateCurrentPlayer={this.updateCurrentPlayer}/>\n          </div>\n          <div className=\"col s9\"><PlayerSingle player={this.state.currentPlayer}/></div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s12\"><PlayerForm /></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}